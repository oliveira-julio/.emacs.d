#+TITLE: My Emacs Configuration
#+STARTUP: showeverything



* Configuration
#+NAME: conf-init
** About this file
#+NAME: about-file
My personal emacs configuration. Has been written like a "org" file
because which in my opinion is a better way to write it.  

Was inspired by [[https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org][Sacha Chua Emacs configuration]].

** Startup
#+NAME: startup

#+begin_src emacs-lisp :tangle yes
(require 'package)
(package-initialize)
(setq package-enable-at-startup nil)
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file 'noerror)
(find-file "~/todo.org")
#+end_src


** Personal information
#+begin_src emacs-lisp :tangle yes
(setq user-full-name "Julio Oliveira"
      user-mail-address "antoniojuliodeo@gmail.com")
#+end_src


** Emacs Initialization
*** Add Packages Sources
#+begin_src emacs-lisp :tangle yes
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)
#+end_src

*** Add my elisp directory, my themes and other files
#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "~/.emacs.d/elisp/")
(add-to-list 'load-path "~/.emacs.d/elisp/themes/")

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+end_src


** General configuration
*** Backups
#+begin_src emacs-lisp :tangle yes

;; default directories
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; backup config
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)

#+end_src

*** Theme
#+begin_src emacs-lisp :tangle yes
  (use-package material-theme
    :ensure t
    :init
    (load-theme 'material t))
#+end_src

*** Guide Key
#+begin_src emacs-lisp :tangle yes
  (use-package guide-key
    :ensure t

    :config
    (setq guide-key/guide-key-sequence '("C-x r" "C-x 4"))
    (setq guide-key/guide-key-sequence '("C-x"))
    (setq guide-key/guide-key-sequence '("C-c"))
    (setq guide-key/recursive-key-sequence-flag t)

    :init
    (guide-key-mode 1))
#+end_src


*** Change “yes or no” to “y or n”
#+begin_src emacs-lisp :tangle yes
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src 

*** helm
#+begin_src emacs-lisp :tangle yes

    (use-package helm
      :diminish helm-mode
      :init

      (progn
        (require 'helm-config)
        (helm-mode 1))

      
      :bind (("C-c h" . helm-mini)
             ("C-h a" . helm-apropos)
             ("C-x C-b" . helm-buffers-list)
             ("C-x C-f" . helm-find-files)
             ("C-x b" . helm-buffers-list)
             ("M-y" . helm-show-kill-ring)
             ("M-x" . helm-M-x)
             ("C-x c o" . helm-occur)
             ("C-x c s" . helm-swoop)
             ("C-x c y" . helm-yas-complete)
             ("C-x c Y" . helm-yas-create-snippet-on-region)
             ("C-x c b" . my/helm-do-grep-book-notes)
             ("C-x c SPC" . helm-all-mark-rings)))
#+end_src
*** Windows configuration
Disables the menu, and the useless scrollbar and toolbar.
#+begin_src emacs-lisp :tangle yes
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
#+end_src

Move windows with shift
#+begin_src emacs-lisp :tangle yes
(windmove-default-keybindings)
#+end_src

Inhibit the startup screen, and initial (useless) messages
#+begin_src emacs-lisp :tangle yes
(setq inhibit-startup-screen  t
initial-scratch-message nil)
#+end_src

*** Mode line and highlight line
Shows the (Line, Column) information in the mode-line.
#+begin_src emacs-lisp :tangle yes
(line-number-mode   1)
(column-number-mode 1)
#+end_src

Highlight both the current line and matching parenthesis.
#+begin_src emacs-lisp :tangle yes
(global-hl-line-mode   1)
(show-paren-mode 1)
#+end_src

Enable smart-mode-line
#+begin_src emacs-lisp :tangle yes
  (use-package telephone-line
    :init
    (telephone-line-mode 1)
    :config
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
          telephone-line-secondary-left-separator 'telephone-line-cubed-hollow-left
          telephone-line-primary-right-separator 'telephone-line-cubed-right
          telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right))
#+end_src

Baterry and time
#+begin_src emacs-lisp :tangle yes
(display-battery-mode)
(display-time-mode)
#+end_src

*** linum and linum relative
#+begin_src emacs-lisp :tangle yes
  (use-package linum
    :config
    (global-linum-mode t))

  (use-package linum-relative
    :config
    (linum-relative-global-mode t))
#+end_src

** Org

*** Packages
#+begin_src emacs-lisp :tangle yes

  (use-package org-bullets
    :ensure t)
  (use-package org
    :ensure t
    :hook
    ((org-mode . org-indent-mode)
     (org-mode . org-bullets-mode)
     (org-mode . yas-minor-mode))
    :bind
    (("C-c l" . 'org-store-link)
     ("C-c a" . 'org-agenda)
     ("C-c c" . 'org-capture)
     ("C-c b" . 'org-iswitchb))
    :config
    (setq org-todo-keywords
          '((sequence "TODO(t)" "|" "DONE(d)")
            (sequence "|" "CANCELED(c)")))
    (setq org-log-done 'time))
#+end_src


** Yasnippet
*** Package
#+begin_src emacs-lisp :tangle yes
  (use-package yasnippet
    :ensure t)
#+end_src

** Python
#+begin_src emacs-lisp :tangle yes
  (use-package python
    :init
    (elpy-enable)

    :hook
    ((python-mode . pygen-mode)
     (python-mode . electric-operator-mode)
     (python-mode . yas-minor-mode))


    
    :mode ("\\.py\\'" . python-mode)
    :interpreter ("python" . python-mode))
#+end_src

** avy
#+begin_src emacs-lisp :tangle yes
  (use-package avy
    :ensure t
    :bind
    (("C-c j" . avy-goto-char)))
#+end_src

** expand region
#+begin_src emacs-lisp :tangle yes
(use-package expand-region
    :ensure t
    :bind
    (("C-=" . 'er/expand-region)))
#+end_src


** mark all
#+begin_src emacs-lisp :tangle yes
  (use-package multiple-cursors
    :ensure t
    :bind
    (("C-c C-<" . mc/mark-all-like-this)))
#+end_src
